{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PLAXIS 3D Automation Reference","text":"<p>Practical Python automation for PLAXIS 3D: a concise reference with examples, recipes, and line\u2011by\u2011line walkthroughs of a working automation stack.</p> <p>Who is this for?</p> <p>Geotech/tunnel engineers who want reliable, repeatable PLAXIS 3D workflows using Python with zero fluff and lots of copy\u2011paste\u2011ready snippets.</p> <p>Highlights - Ready\u2011to\u2011run examples and recipes - Annotated <code>plaxis.py</code> with function\u2011by\u2011function docs - JSON\u2011driven configuration for fast iteration - Batch runs + logging patterns for scale - Troubleshooting playbook for real\u2011world issues</p> <p>Download the example project: - <code>docs/assets/code/AI_PLAXIS_training/</code> (included in this repo)</p>"},{"location":"api/helpers/","title":"Helpers","text":"<ul> <li>Safe JSON load/save</li> <li>Path utilities (run ids, output dirs)</li> <li>Result post\u2011processing (e.g., pandas summaries)</li> </ul>"},{"location":"api/plaxis.py/","title":"<code>plaxis.py</code> \u2014 API Reference","text":"<p>Each function below includes: signature, parameters, returns, and a Try this snippet.</p>"},{"location":"api/plaxis.py/#connecthost-str-port-int-password-str","title":"<code>connect(host: str, port: int, password: str)</code>","text":"<ul> <li>Returns: <code>(s, g)</code> server + global handles.</li> <li>Notes: one place to set timeouts, retries, and logging of connection info.</li> </ul>"},{"location":"api/plaxis.py/#build_modelcfg-dict-s-g-dict","title":"<code>build_model(cfg: dict, s, g) -&gt; dict</code>","text":"<ul> <li>Parameters: <code>cfg[\"geometry\"]</code>, <code>cfg[\"materials\"]</code>\u2026</li> <li>Returns: model summary dict.</li> </ul>"},{"location":"api/plaxis.py/#run_calculationcfg-dict-s-g-dict","title":"<code>run_calculation(cfg: dict, s, g) -&gt; dict</code>","text":"<ul> <li>Does: define phases/stages, run, wait, collect outputs.</li> </ul>"},{"location":"api/plaxis.py/#export_resultscfg-dict-s-g-out_dir-str-dict","title":"<code>export_results(cfg: dict, s, g, out_dir: str) -&gt; dict</code>","text":"<ul> <li>Does: extract selected results to CSV/JSON; return summary stats.</li> </ul> <p>Pattern</p> <p>Keep functions pure. Avoid global state beyond the <code>s, g</code> handles.</p> <p>Open the example code</p> <p>Browse the example implementation shipped with this guide at <code>docs/assets/code/AI_PLAXIS_training/plaxis/plaxis.py</code></p>"},{"location":"appendix/changelog/","title":"Changelog","text":"<ul> <li>v0.2 \u2014 Added example code and JSONs.</li> </ul>"},{"location":"appendix/faq/","title":"FAQ","text":"<p>Can I run this without admin rights? Yes, as long as PLAXIS and the remote server are available to your user.</p>"},{"location":"concepts/batching-and-logging/","title":"Batching &amp; Logging","text":"<p>Pattern used in this guide: 1. Load <code>inputs_all.json</code> (list of runs). 2. For each item, call into <code>plaxis.py</code> with a single <code>input.json</code>\u2011like dict. 3. Append results (or errors) to <code>plaxis_log.json</code> with timestamps &amp; run id.</p> <pre><code># pseudo\nfor cfg in inputs_all:\n    try:\n        result = run_one(cfg)\n        log.append({**summary(result), \"status\": \"ok\"})\n    except Exception as e:\n        log.append({\"run_id\": cfg[\"id\"], \"status\": \"error\", \"msg\": str(e)})\n</code></pre>"},{"location":"concepts/config-jsons/","title":"Config JSONs","text":"<p>Keep JSON structures explicit and typed. Suggested top\u2011level keys:</p> <pre><code>{\n  \"project\": \"ex01_simple_tunnel\",\n  \"geometry\": { \"diameter_m\": 6.0, \"length_m\": 50.0 },\n  \"materials\": { \"soil\": \"Silty Sand\", \"E50_MPa\": 25 },\n  \"staging\": [{ \"name\": \"exc_1\", \"advance_m\": 1.0 }],\n  \"outputs\": [\"ux\", \"uy\", \"uz\", \"sigma1\"]\n}\n</code></pre> <p>See Reference \u2192 Config Schema for a precise schema + examples.</p>"},{"location":"concepts/remote-scripting/","title":"Remote Scripting","text":"<ul> <li>Connect once, reuse the session.</li> <li>Use <code>g</code> for commands (global) and <code>s</code> for server control.</li> <li>Prefer idempotent functions: re\u2011running should not corrupt state.</li> <li>Validate connection; fail fast with helpful error messages.</li> </ul> <pre><code>from plxscripting.easy import new_server\n\ndef connect(host='localhost', port=10000, password=''):\n    s, g = new_server(host, port, password=password)\n    return s, g\n</code></pre>"},{"location":"examples/ex01-simple-tunnel/","title":"Example 01 \u2014 Simple Tunnel","text":"<p>A minimal, reproducible example for first\u2011time users using the provided <code>input.json</code>.</p>"},{"location":"examples/ex02-cross-passage-agf/","title":"Example 02 \u2014 Cross Passage (AGF)","text":"<p>Sketch an AGF\u2011oriented workflow: freeze pipes setup, staged excavation, monitoring outputs.</p>"},{"location":"examples/ex03-batch-calcs/","title":"Example 03 \u2014 Batch Calculations","text":"<p>Demonstrates <code>inputs_all.json</code> controlling multiple runs and aggregating results.</p>"},{"location":"get-started/first-run/","title":"First Run","text":"<p>Minimal handshake to confirm the PLAXIS remote server works:</p> <pre><code># try_plaxis_handshake.py\nfrom plxscripting.easy import new_server\ns, g = new_server('localhost', 10000, password='your_password')\nprint(g.version)\ns.close()\n</code></pre> <p>If you see a version string printed, you're set. Next, run the simplest end\u2011to\u2011end recipe in Recipes \u2192 Create Model from JSON.</p>"},{"location":"get-started/folder-structure/","title":"Project Structure","text":"<p>A minimal layout mirroring the training workflow used in this guide:</p> <pre><code>AI_PLAXIS_training/\n\u251c\u2500\u2500 plaxis/\n\u2502   \u251c\u2500\u2500 inputs_all.json\n\u2502   \u251c\u2500\u2500 input.json\n\u2502   \u251c\u2500\u2500 soils_total.json\n\u2502   \u2514\u2500\u2500 plaxis.py\n\u251c\u2500\u2500 run_plaxis_AI_training.py\n\u2514\u2500\u2500 plaxis_log.json     # auto\u2011created\n</code></pre> <ul> <li><code>input.json</code> \u2013 single run configuration (geometry, materials, stages).</li> <li><code>inputs_all.json</code> \u2013 list of runs for batching/parametric studies.</li> <li><code>soils_total.json</code> \u2013 shared material library.</li> <li><code>plaxis.py</code> \u2013 automation functions called by the runner.</li> <li><code>run_plaxis_AI_training.py</code> \u2013 orchestrates batch execution + logging.</li> <li><code>plaxis_log.json</code> \u2013 appended by the runner with results + status.</li> </ul>"},{"location":"get-started/install/","title":"Install &amp; Setup","text":""},{"location":"get-started/install/#1-python-environment","title":"1) Python environment","text":"<pre><code>python -m venv .venv\nsource .venv/bin/activate  # Windows: .venv\\Scripts\\activate\npip install -r requirements.txt\n</code></pre>"},{"location":"get-started/install/#2-plaxis-remote-scripting","title":"2) PLAXIS Remote Scripting","text":"<ul> <li>Ensure PLAXIS 3D is installed with the Python Remote Scripting interface.</li> <li>Enable the remote server (localhost, default port) in PLAXIS 3D.</li> <li>Verify connectivity with a short handshake (see First Run).</li> </ul> <p>Note</p> <p>You do not need a web server. This documentation site can be hosted free on GitHub Pages or shipped as an offline HTML bundle.</p>"},{"location":"recipes/create-model-from-json/","title":"Create Model from JSON","text":"<p>Minimal flow using the included example files:</p> <pre><code>from pathlib import Path\nimport json\nfrom assets.code.AI_PLAXIS_training.plaxis.plaxis import connect, build_model, run_calculation, export_results\n\ncfg = json.loads(Path('docs/assets/code/AI_PLAXIS_training/plaxis/input.json').read_text())\ns, g = connect(password='your_password')\nbuild = build_model(cfg, s, g)\nresults = run_calculation(cfg, s, g)\nexport = export_results(cfg, s, g, out_dir='outputs')\ns.close()\n</code></pre> <p>Try this</p> <p>Start with a tiny <code>input.json</code> (single material, short length) to validate the pipeline before scaling.</p>"},{"location":"recipes/extract-results-to-pandas/","title":"Extract Results to Pandas","text":"<p>Save displacement fields/selected points to CSV and post\u2011process with pandas for quick plots or Power BI pipelines.</p>"},{"location":"recipes/run-parametric-study/","title":"Parametric Study","text":"<p>Use <code>inputs_all.json</code> to define a matrix (e.g., diameter \u00d7 E50). For each run: - Build model \u2192 run \u2192 export \u2192 append to <code>plaxis_log.json</code>. - Collect a final dataframe for comparison/plots.</p> <pre><code># See runner: docs/assets/code/AI_PLAXIS_training/run_plaxis_AI_training.py\n</code></pre>"},{"location":"recipes/soil-layering-from-csv/","title":"Soil Layering from CSV","text":"<p>Outline: 1. Load borehole CSV \u2192 layers. 2. Map to <code>soils_total.json</code> materials. 3. Create soil clusters and assign materials.</p>"},{"location":"recipes/visualize-displacements/","title":"Visualize Displacements","text":"<p>Quick\u2011and\u2011dirty Python plotting or export to a BI tool. Keep heavy visualization out of PLAXIS for speed; treat PLAXIS as the solver.</p>"},{"location":"reference/cli/","title":"CLI","text":"<p>You can expose a simple CLI entry point (optional), e.g. <code>python run_plaxis_AI_training.py --inputs inputs_all.json</code>.</p>"},{"location":"reference/config-schema/","title":"Config Schema (Draft)","text":"<p>Top level</p> Key Type Required Notes <code>project</code> string \u2713 slug for outputs <code>geometry</code> object \u2713 tunnel, alignment, lengths <code>materials</code> object \u2713 references <code>soils_total.json</code> <code>staging</code> array \u2713 ordered list of phases <code>outputs</code> array e.g., <code>[\"ux\",\"uy\",\"uz\",\"sigma1\"]</code> <p>Geometry <pre><code>{\n  \"diameter_m\": 6.0,\n  \"length_m\": 50.0,\n  \"axis\": [0, 0, 1],\n  \"start_xyz\": [0, 0, 0]\n}\n</code></pre></p> <p>Materials - <code>\"soil\"</code>: key name referring to <code>soils_total.json</code> - Optional project\u2011specific overrides, e.g. <code>{\"E50_MPa\": 30}</code></p> <p>Staging <pre><code>[{ \"name\": \"exc_1\", \"advance_m\": 1.0 }]\n</code></pre></p>"},{"location":"troubleshooting/connection-errors/","title":"Connection Errors","text":"<ul> <li>Check host/port/password; confirm PLAXIS remote server is running.</li> <li>Firewall/VPN can block localhost ports (rare but happens).</li> <li>Retry with backoff; log the first failure reason.</li> </ul>"},{"location":"troubleshooting/geometry-gotchas/","title":"Geometry Gotchas","text":"<ul> <li>Units! Keep meters/MPa consistent across JSONs and scripts.</li> <li>Degenerate clusters cause solver issues \u2014 validate inputs.</li> <li>Tunnel alignment vs. global axes: be explicit.</li> </ul>"},{"location":"troubleshooting/long-runs-and-timeouts/","title":"Long Runs &amp; Timeouts","text":"<ul> <li>Use coarse meshes for drafts; refine only when stable.</li> <li>Split long studies; checkpoint intermediate results.</li> <li>Use systematic naming to resume failed runs cleanly.</li> </ul>"}]}